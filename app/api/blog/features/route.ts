import { NextRequest, NextResponse } from "next/server";
import { blogDb } from "@/lib/supabase/blog-client";

export async function GET() {
  try {
    // Check if blogDb is available
    if (!blogDb) {
      return NextResponse.json(
        { error: "Blog database not configured" },
        { status: 503 }
      );
    }

    const { data, error } = await blogDb
      .from("feature_toggles")
      .select(
        "total_views, total_likes, total_comments, ai_summaries, ai_questions"
      )
      .limit(1)
      .single();

    if (error) {
      if (error.code === "PGRST116") {
        const { data: allData, error: fetchError } = await blogDb
          .from("feature_toggles")
          .select("*")
          .limit(1);

        if (fetchError) throw fetchError;

        if (allData && allData.length > 0) {
          return NextResponse.json(allData[0]);
        } else {
          const defaultToggles = {
            id: "default",
            total_views: true,
            total_likes: true,
            total_comments: true,
            ai_summaries: true,
            ai_questions: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          };

          const { data: insertedData, error: insertError } = await blogDb
            .from("feature_toggles")
            .insert(defaultToggles)
            .select()
            .single();

          if (insertError) throw insertError;
          return NextResponse.json(insertedData);
        }
      }
      throw error;
    }

    return NextResponse.json(data);
  } catch (error) {
    console.error("Error fetching feature toggles:", error);
    return NextResponse.json(
      { error: "Failed to fetch feature toggles" },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    // Check if blogDb is available
    if (!blogDb) {
      return NextResponse.json(
        { error: "Blog database not configured" },
        { status: 503 }
      );
    }

    const body = await request.json();
    const {
      total_views,
      total_likes,
      total_comments,
      ai_summaries,
      ai_questions,
    } = body;

    const updateData = {
      total_views,
      total_likes,
      total_comments,
      ai_summaries,
      ai_questions,
      updated_at: new Date().toISOString(),
    };

    let resultData;

    // First, try to fetch the existing feature toggle
    const { data: existingToggle, error: fetchError } = await blogDb
      .from("feature_toggles")
      .select("id")
      .limit(1)
      .single();

    if (fetchError && fetchError.code !== "PGRST116") {
      // PGRST116 means no rows found
      throw fetchError;
    }

    if (existingToggle) {
      // If a toggle exists, update it using its actual UUID
      const { data: updatedData, error: updateError } = await blogDb
        .from("feature_toggles")
        .update(updateData)
        .eq("id", existingToggle.id)
        .select(
          "total_views, total_likes, total_comments, ai_summaries, ai_questions"
        )
        .single();

      if (updateError) throw updateError;
      resultData = updatedData;
    } else {
      // If no toggle exists, insert a new one
      // The 'id' will be auto-generated by the database
      const { data: insertedData, error: insertError } = await blogDb
        .from("feature_toggles")
        .insert({
          ...updateData,
          created_at: new Date().toISOString(),
        })
        .select(
          "total_views, total_likes, total_comments, ai_summaries, ai_questions"
        )
        .single();

      if (insertError) throw insertError;
      resultData = insertedData;
    }

    return NextResponse.json(resultData);
  } catch (error) {
    console.error("Error updating feature toggles:", error);
    return NextResponse.json(
      { error: "Failed to update feature toggles" },
      { status: 500 }
    );
  }
}
